from extensions import *
from helpers import *
from graphlib import *
from alignment import *

# Lesson 3 - Week 1

# 1.5.10 - Dynamic Programming
if run(1):
   ints = [50,25,20,10,5,1]
   minPickDP(40, ints) |> testVs(2)

   ints = [15,14,5,3,1]
   minPickDP(18347, ints) |> testVs(1224)

# 1.6.10 - Manhattan Tourist
if run(2):
   mats = parseMats('''1 0 2 4 3
4 6 5 2 1
4 4 5 2 1
5 6 8 5 3
-
3 2 4 0
3 2 4 2
0 7 3 3
3 3 0 2
1 3 2 2''')
   manhattanTourist(mats[0], mats[1]) |> testVs(34)

   mats = parseMats('''4 1 0 4 2
4 3 2 0 2
1 0 3 1 0
1 4 4 2 4
1 0 4 1 3
-
4 4 2 4
4 1 1 4
0 1 4 4
1 3 1 4
4 3 3 3
2 0 2 3''')
   manhattanTourist(mats[0], mats[1]) |> testVs(28)


# 1.7.5 - LCS - Longest Common Subsequence
if run(3):
   longestCommonSubseq('AACCTTGG', 'ACACTGTGA') |> testVs('AACTTG')

   l = readlines('dataset_245_5.txt')
   longestCommonSubseq(l[0], l[1]) |> testVs('GGTACACATCAAGTCCAGGCCAAGTTATTTTCGAATGTGAAGCATGTTTCATACAGACCCACCTCCAGTTACATCGACTTTGGCCTACTTCTGACTGAAATGACTGATAGGAAATAAACTACGTTCCGACATATCGACTTTTTCGAATTTATAGTAGTGGCCATCCTATTTTGTGTTCTGACAATGCGTACATTACATATGACCTTACTTCGAGACGGTGATATTGTATCGAAGGCAAAACCTCCGGTGGCAGCGCGCTGCAATCACGAATCGACCCAGGTCGGTGGAACTGCGCCCTACACTTGCTCGATTTGCAGCAGTCTATCACCCCAGTCGCCAAGAACCTCGCGCTGAGGTAGTGTAAACTAAGGGCTAGTGTCACTGGAATAGGACATACCCAAAGATAATTGAAGGCATATGGAGCTACTTGCCCGACAATTACCTTGTAGTTGAGGGTACATAGGAAGTCCAACCGATAACAACGCGCATGCGTGACCTTCCTGTCTTCCCAGCACAATGCCCACGCTACTGAGAGTCTTGATTTCTGGAATCAGTACAGGTTTTAACCCGTAGAAGGTATTTTAACCTAGTAAAGCGAAAATCGGGAGCAATAA')

# 1.7.7 - Longest Path in DAG
if run(4):
   wg = parseWGraph('''0->1:7
0->2:4
2->3:2
1->4:1
3->4:3''')
   paths = topologicalSort(wg)
   d, p = longestWeightedPath(paths, '0')
   res = pathArrowStr(p, '->')
   f"{d}\n{res}" |> testVs('9\n0->2->3->4')

   wg = parseWGraph('''0->1:1
0->3:10
1->2:1
2->3:1''')
   paths = topologicalSort(wg)
   d, p = longestWeightedPath(paths, '0')
   res = pathArrowStr(p, '->')
   f"{d}\n{res}" |> testVs('10\n0->3')

if run(5):
   l = readlines('dataset_245_7.txt')
   wg = parseWGraph('\n'.join(l[2:]))
   paths = topologicalSort(wg)
   d, p = longestWeightedPath(paths, l[0])
   res = pathArrowStr(p, '->')
   f"{d}\n{res}" |> testVs('172\n0->1->4->5->7->12->13->16->17->22->27->32->36->43->46->49')
