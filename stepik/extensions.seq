type Ints = list[int]
type Seqs = list[seq]
type Strs = list[str]
type Floats = list[float]
type SeqsSet = set[seq]
type StrsSet = set[str]
type GraphDict = dict[str, seq]
type Profile = dict[seq, list[float]]
type SeqFloatDict = dict[seq, float]
type SeqIntDict = dict[seq, int]
type strGraph = dict[str, Strs]
type Pairs = list[tuple[seq, seq]]
type StrPair = tuple[str, str]
type StrPairs = list[StrPair]

extend seq:
   def __add__(s1:seq, s2:seq) -> seq:
      return seq(str(s1) + str(s2))

   def reverse(s1:seq) -> seq:
      st = str(s1)
      return seq(''.join([s for s in reversed(st)]))

   def replace(s1:seq, frm:str, to:str) -> seq:
      st = str(s1)
      return seq(st.replace(frm, to))

   def __sub__(s1:seq, s2:seq) -> int:
      smLen = len(s1) if len(s1) < len(s2) else len(s2)
      diff = len([1 for i in range(smLen) if s1[i] != s2[i]])
      return diff + abs(len(s1) - len(s2)) 
