type Ints = list[int]
type Seqs = list[seq]
type Strs = list[str]
type Floats = list[float]
type SeqsSet = set[seq]
type StrsSet = set[str]
type GraphDict = dict[str, seq]
type Profile = dict[seq, list[float]]
type SeqFloatDict = dict[seq, float]
type SeqIntDict = dict[seq, int]
type IntIntDict = dict[int, int]
type Graph = dict[str, Strs]
type WGraph = dict[str, list[tuple[str,int]]]
type WPaths = list[tuple[str, list[tuple[str,int]]]]
type Pairs = list[tuple[seq, seq]]
type SIPair = tuple[str, int]
type StrPair = tuple[str, str]
type StrPairs = list[StrPair]
type IntMat = list[Ints]
type StrMat = list[Strs]
type StrMatMap = dict[str, StrMat]
type IntMatMap = dict[str, IntMat]
type ScoreMat = dict[str, dict[str,int]]

extend seq:
   def __add__(s1:seq, s2:seq) -> seq:
      return seq(str(s1) + str(s2))

   def reverse(s1:seq) -> seq:
      st = str(s1)
      return seq(''.join([s for s in reversed(st)]))

   def replace(s1:seq, frm:str, to:str) -> seq:
      st = str(s1)
      return seq(st.replace(frm, to))

   def __sub__(s1:seq, s2:seq) -> int:
      smLen = len(s1) if len(s1) < len(s2) else len(s2)
      diff = len([1 for i in range(smLen) if s1[i] != s2[i]])
      return diff + abs(len(s1) - len(s2)) 

extend list[T]:
   def sortedByList(X, Y):
      return [x for _,x in sorted(zip(Y,X))]

extend str:
   # eslice additions: https://github.com/seq-lang/seq/commit/ae1384cdab890f888fe751d515bc50fd385726a8
   def _make_from_range(self: str, start: int, stop: int, step: int, length: int):
      p = ptr[byte](length)
      j = 0
      for i in range(start, stop, step):
         p[j] = self.ptr[i]
         j += 1
      return str(p, length)

   def __getitem__(self: str, s: esslice):
      start, stop, step, length = slice.adjust_indices(len(self), step=s.step)
      return self._make_from_range(start, stop, step, length)

   def __getitem__(self: str, s: rsslice):
      start, stop, step, length = slice.adjust_indices(len(self), start=s.start, step=s.step)
      return self._make_from_range(start, stop, step, length)

   def __getitem__(self: str, s: lsslice):
      start, stop, step, length = slice.adjust_indices(len(self), end=s.end, step=s.step)
      return self._make_from_range(start, stop, step, length)

   def __getitem__(self: str, s: sslice):
      start, stop, step, length = slice.adjust_indices(len(self), start=s.start, stop=s.end, step=s.step)
      return self._make_from_range(start, stop, step, length)
   # end eslice additions

# extend dict:
#    def sortedKeysByVal(D):
#       T = sorted([v for v in D.values()])
#       return [x for _,x in sorted(zip(Y,X))]