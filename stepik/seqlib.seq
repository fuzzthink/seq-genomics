from extensions import *

A = s'A'
C = s'C'
G = s'G'
T = s'T'
ACGT = [A, C, G, T]
ACGTStr = 'ACGT'

# NOTEs:
# list(gen()) gives "bus error": compiler bug https://github.com/seq-lang/seq/issues/102


def insert[T](a:list[T], i:int, x:T):
   # insert Bug: https://github.com/seq-lang/seq/issues/106 
   if i >= len(a):
      a.append(x)
   else:
      a.insert(i, x)

def product[T](nums:list[T]) -> T:
   res = nums[0]
   for n in nums[1:]:
      if n == 0:
         return T(0)
      res *= n
   return res

def forIndexes(dna:seq, ptn:seq, d=0):
   """ Generates indexes of ptn in dna, with optional max hamming distance d
   """
   for i, s in enumerate(dna.split(len(ptn), 1)):
      if s - ptn <= d:
         yield i

def indexesIn(dna:seq, ptn:seq, d=0) -> list[int]:
   """ Like forIndexes(), but returns actual list, not a generator
   """
   # return list(forIndexes(dna, ptn, d)) # bus error 
   return [i for i, s in enumerate(dna.split(len(ptn), 1)) if s - ptn <= d]

def matched(dna:seq, ptn:seq, d=0) -> bool:
   """ Returns if (bool) ptn is in dna, with optional max hamming distance d
   """
   for s in dna.split(len(ptn), 1):
      if s - ptn <= d:
         return True
   return False

def matchedAll(seqs:Seqs, ptn:seq, d=0) -> bool:
   """ Returns if (bool) ptn is in every seq in seqs, with optional max hamming distance d
   """
   return all(matched(s, ptn, d) for s in seqs)

def frequentKmers(dna:seq, k:int):
   """ Returns most freq k-mers in dna
   """
   cnt = dict[seq, int]()
   for kmr in dna.split(k, 1):
      cnt[kmr] = cnt[kmr]+1 if kmr in cnt else 0

   maxCnt = max(cnt.values())
   return [kmr for kmr in cnt.keys() if cnt[kmr] == maxCnt]

def patternsDifferBy(ptn:seq, d:int) -> Seqs:
   """ 
   d-distance neighbors - all ptns where they differs ptn by d or less
   Eg. 'AC', 1:
     [CC, GC, TC, AA, AG, AT]
   Eg. 'ACT', 1:
     ACC ACT CCT TCT ACG AAT GCT ATT AGT ACA
   Eg. 'ACGT', 1:
     ATGT ACTT ACGG GCGT CCGT AAGT ACGT ACCT AGGT ACAT ACGA TCGT ACGC
   len of 'ACGT', 3:  67
   len of 'ACGT', 3: 175
   len of 'ACGT', 4: 256
   """ 
   if d == 0:
      return [ptn]       
   elif len(ptn) == 1:
      return ACGT
   res = set[seq]()
   suffixPerms = patternsDifferBy(ptn[1:], d)

   for p in suffixPerms:
      # If ptn=s'ACGT', d=2:
      # i: ptn  | suffixPerms
      # 1: GT   | [A, C, G, T]
      # 2: CGT  | [AA, CC, AC, GG, CG, AG, TT, TA, GT, TC, CT, TG, AT, GA, GC, CA]
      # 3: ACGT | [ATT, TGT, CTT, TCT, GTT, TAT, TTT, AGA, CGA, AGC, CGC, AGG, GGA, ...]

      if ptn[1:] - p < d: # make sure mismatch requirement is less than d
         for x in ACGT:
            res.add(x + p)
      else:
         res.add(seq(str(ptn[0]) + str(p)))
   return list(res)


def kmersDifferBy[K](kmer:K):
   """ patternsDifferBy()-like Generator, where input is a Kmer and and dist=1
   """
   for i in range(len(kmer)):
      for b in (k'A', k'C', k'G', k'T'):
         if kmer[i] != b:
            yield kmer |> base(i, b)

def mostFreqKmers(dna:seq, k:int, d=0, revComp=False) -> Seqs:
   """ Returns the most most freq k-mers in dna by d-distance or less.
   If revComp=True, account for reverse complement too.
   """
   cnts = dict[seq, int]()
   if d <= 0:
      for kmr in dna.split(k, 1):
         cnts[kmr] = cnts[kmr]+1 if kmr in cnts else 0
   else:
      for i, p1 in enumerate(dna.split(k, 1)):
         for p2 in patternsDifferBy(p1, d):
            cnts[p2] = cnts[p2]+1 if p2 in cnts else 1
         if revComp:
          for p2 in patternsDifferBy(~p1, d):
            cnts[p2] = cnts[p2]+1 if p2 in cnts else 1
   maxCnt = max(cnts.values())
   return [kmr for kmr in cnts.keys() if cnts[kmr] == maxCnt]

def permsOfLen(k:int, ptnStr=ACGTStr) -> Seqs:
   """ Permutations of ptnStr of length k
   """
   res = Seqs()
   for r in range(len(ptnStr) ** k):
      s = ''
      for j in range(k):
         mod = len(ptnStr) ** (k-j)
         div = len(ptnStr) ** (k-j-1)
         s += ptnStr[(r % mod) // div]
      res.append(seq(s))
   return res if k > 0 else Seqs()

def kmerEnums(seqs:Seqs, k:int, d:int) -> Seqs:
   """
   All k-mers that appear in seqs with at most d mismatches. 
   Eg. k=3, d=1, seqs=[ATTTGGC TGCCTTA CGGTATC GAAAATT]
   gives [ATA ATT GTT TTT]
   """
   patterns = set[seq]()
   for i, s in enumerate(seqs):
      for kmer in s.split(k, 1):
         for ptn in patternsDifferBy(kmer, d):
            if matchedAll(seqs[:i] + seqs[i+1:], ptn, d):
               patterns.add(ptn)
   return list(patterns)

def distIn(seqs:Seqs, pattern:seq) -> int:
   """ Eg. pattern of AAA:
   d(AAA, TTACCT[TAA]C) = 1
   d(AAA, [ACG]GCGTTCG) = 2
   d(AAA, CCCT[AAA]GAG) = 0 = 1+2 = 3
   """
   k = len(pattern)
   dist = 0
   for s in seqs:
      hamD = len(s)
      for ptn in s.split(k, 1):
         if hamD > pattern - ptn:
            hamD = pattern - ptn
      dist += hamD
   return dist

def medianKmer(seqs:Seqs, k:int) -> seq:
   """
   Find kmer that w/ least dist over all kmer patterns in seqs
   Eg.    AAC dist 
   ttaccttAAC 1
   gATAtctgtc 1
   ACGgcgttcg 2
   ccctAAAgag 0
   cgtcAGAggt 1
   dist sum = 5
   """
   dist = len(seqs) * k
   res = s''
   for kmer in permsOfLen(k):
      dist_ = distIn(seqs, kmer)
      if dist > dist_:
         dist = dist_
         res = kmer
   return res

def getClumps(dna:seq, k:int, L:int, minTimes:int) -> Seqs:
   """ All distinct k-mers forming (L, t)-clumps in Genome.
   i.e. distinct k-mers that occurs >= minTimes within L-length in dna
   """ 
   idxs = dict[seq, list[int]]()
   for i, kmr in enumerate(dna.split(k, 1)):
      if kmr in idxs and len(idxs[kmr]) < minTimes:
         for idx in idxs[kmr]:
            if i - idx + k > L:
               idxs[kmr].pop(0)
         idxs[kmr].append(i)
      elif kmr not in idxs:
         idxs[kmr] = [i]
   return [kmr for kmr in idxs.keys() if len(idxs[kmr]) >= minTimes]

def getSkew(dna:seq, skew0=0) -> list[int]:
   """ Returns skew (running sum of ACTG->+-1/0 mapping) of sequence
   """
   type K1 = Kmer[1]
   def nextSkew(k:K1, n=0):
      d = {
         k'A': 0,
         k'T': 0,
         k'C': -1,
         k'G': 1,
      }
      return d[k] + n
   skew = [skew0]
   for i, k in enumerate(dna.kmers[K1](1)):
      skew.append(nextSkew(k, skew[i]))
   return skew

def minSkewIndices(dna:seq):
   """ Returns indices of min skews of sequence
   """
   low = min(getSkew(dna))
   return [i for i, n in enumerate(getSkew(dna)) if n == low]

def minSkewInFile(f:File) -> list[int]:
   """ Returns indices of min skews of sequence in file
   FASTA('path/Salmonella_enterica.fa') # will work in later releases.
   """
   skews = list[list[int]]()
   lows = list[int]()
   low = 0
   lineLen = 0 

   for i, line in f |> enumerate:
      if i == 0:
         continue
      s = seq(line.replace('\r', ''))
      if i == 1:
         lineLen = len(s)
      skew = getSkew(s, 0 if i==1 else skews[-1][-1])
      low = min(low, (min(skew)))
      skews.append(skew)
   for i, skew in enumerate(skews):
      for j, n in enumerate(skew):
         if n == low:
            lows.append(i * lineLen + j)
   return lows