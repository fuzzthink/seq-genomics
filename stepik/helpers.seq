from sys import argv
from extensions import *


def spaceSep[T](ls:list[T]) -> str:
   return ' '.join([str(k) for k in ls])

def nlSep[T](ls:list[T]) -> str:
   return '\n'.join([str(k) for k in ls])

def run(n:int) -> bool:
   x = argv[1] if len(argv) > 1 else ''
   res = x == '' or int(x) == n
   if res:
      print '\n'+str(n)+':'
   return res

def testIn[T](a:T, b:list[T]):
   if any(a==x for x in b):
      print "✓ result as expected"
   elif len(b)==1:
      print "  result:", a
      print "expected:", b[0]
   else:
      print "     result:", a
      print "exp one of:", b

def testVs[T](a:T, b:T):
   if a == b:
      print "✓ result as expected"
   else:
      print "  result:", a
      print "expected:", b


# Much simpler logic if can map(type, list)

def parseInts(s:str, sep=' ') -> list[int]:
   return [int(x) for x in s.split(sep) if x.strip()]

def parseFloats(s:str, sep=' ') -> list[float]:
   return [float(x) for x in s.split(sep) if x.strip()]

def parseSeqsStr(s:str, sep=' ') -> list[seq]:
   return [seq(x) for x in s.split(sep) if x.strip()]

def parseSeqs(s:list[str], sep=' ') -> list[seq]:
   return [seq(x) for x in s if x.strip()]

def parseProfile(d) -> Profile:
   return {seq(key): parseFloats(d[i]) for i, key in enumerate('ACGT')}

def parseGraphStr(st:str, sep='\n', arrow=' -> ') -> Adjacency:
   res = Adjacency()
   for s in [s.strip() for s in st.split(sep)]:
      x, y = s.split(arrow)
      res[seq(x)] = [seq(z) for z in y.split(',')] if ',' in y else [seq(y)]
   return res

def adjGraphStr(ag:Adjacency) -> str:
   res = [f"{x} -> {','.join([str(y) for y in ag[x]])}" for x in ag]
   return '\n'.join(res)

def arrowPathStr(seqs:Seqs) -> str:
   return '->'.join([str(s) for s in seqs])

def dPath(p:str):
   return 'stepik/data/'+p

def read(p:str) -> File:
   return open(dPath(p), 'r')

def readlines(p:str) -> list[str]:
   f = open(dPath(p), 'r')
   return f.readlines()

def readseqs(p:str) -> list[seq]:
   return list(seqs(dPath(p)))

def readGraphStr(p:str) -> Adjacency:
   s = '\n'.join(open(dPath(p), 'r').readlines())
   return parseGraphStr(s)

