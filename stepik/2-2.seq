from extensions import *
from helpers import *
from adjGraph import *
from graph import *
from seqlib import permsOfLen

# 1.2.2 - Find Eulerian Cycle
if run(1):
   s = '''0 -> 3
   1 -> 0
   2 -> 1,6
   3 -> 2
   4 -> 2
   5 -> 4
   6 -> 5,8
   7 -> 9
   8 -> 7
   9 -> 6'''
   ss = eulerianPath(parseGraphStr(s), 'cycle')
   ss |> arrowPathStr |> testVs('2->1->0->3->2->6->8->7->9->6->5->4->2')

   s = '1 -> 2|2 -> 1,2|0 -> 1'
   ss = eulerianPath(parseGraphStr(s, '|'), 'cycle')
   ss |> arrowPathStr |> testVs('')

   s = '''1 -> 10
   10 -> 2,3,4
   2 -> 1
   3 -> 10
   4 -> 5
   5 -> 10'''
   ss = eulerianPath(parseGraphStr(s), 'cycle')
   ss |> arrowPathStr |> testVs('10->2->1->10->3->10->4->5->10')

   s = '''0 -> 1,2,3,4
   1 -> 0,2,3,4
   2 -> 0,1,3,4
   3 -> 0,1,2,4
   4 -> 0,1,2,3'''
   ss = eulerianPath(parseGraphStr(s), 'cycle')
   ss |> arrowPathStr |> testVs('0->1->0->2->0->3->0->4->1->2->1->3->1->4->2->3->2->4->3->4->0')

   s = '0 -> 3,1|1 -> 2|2 -> 0|3 -> 0'
   ss = eulerianPath(parseGraphStr(s, '|'), 'cycle')
   ss |> arrowPathStr |> testVs('0->3->0->1->2->0')

   ag = readGraphStr('dataset_203_2.txt')
   print eulerianPath(ag, 'cycle') |> arrowPathStr

# 1.2.6 - Find Eulerian Path
if run(2):
   s = '''0 -> 2
   1 -> 3
   2 -> 1
   3 -> 0,4
   6 -> 3,7
   7 -> 8
   8 -> 9
   9 -> 6'''
   eulerianPath(parseGraphStr(s), 'path') |> arrowPathStr |> testVs('6->7->8->9->6->3->0->2->1->3->4')
   ag = readGraphStr('dataset_203_6.txt')
   print eulerianPath(ag, 'path') |> arrowPathStr

# 1.2.7 - Reconstruct Genome from scrambled seqs
if run(3):
   ss =  parseSeqsStr('CTTA ACCA TACC GGCT GCTT TTAC')
   genomeFromSeqs(ss, 'path') |> testVs(s'GGCTTACCA')

   ss = parseSeqsStr('AAC AAC ACG ACT CGA GAA')
   genomeFromSeqs(ss, 'path') |> testVs(s'AACGAACT')

   ss = parseSeqsStr('CTAC CTCC TCCT ACTC CCTC CCTA TACT')
   genomeFromSeqs(ss, 'path') |> testIn([s'CCTACTCCTC', s'CCTCCTACTC'])

   ss = parseSeqsStr('CCC CCC CCC TCC CCC CCG CCC CCC CCC')
   genomeFromSeqs(ss, 'path') |> testVs(s'TCCCCCCCCCG')

   ss = parseSeqsStr('AG AT AA GA GG GT TA TG TT AT')
   genomeFromSeqs(ss, 'path') |> testIn([s'AAGTTGGATAT', s'AGATAATGGTT'])

   l = readlines('dataset_203_7.txt')
   print genomeFromSeqs(parseSeqs(l[1:]), 'path')

# 1.2.9 - only 1 k-Universal Circular Path and its reverse, so answer = 2

# 1.2.11 - Find k-Universal Circular String
if run(4):
   kmers = permsOfLen(3, '01')
   s = genomeFromSeqs(kmers, 'universal')
   s |> testVs(s'00101110')

   kmers = permsOfLen(4, '01')
   s = genomeFromSeqs(kmers, 'universal')
   s |> testVs(s'0010011010111100')

   kmers = permsOfLen(9, '01')
   s = genomeFromSeqs(kmers, 'universal')
   s |> testVs(s

# 1.3 - Assembling Genomes from Read-Pairs

# 1.3.7 - Generate (k, d)-mer Composition of a pattern 
if run(5):
   ptn = s'TAATGCCATGGGATGTT'
   s = pairedComposition(ptn, 3, 1) |> toPairsStr
   s |> testVs('(AAT|CCA) (ATG|CAT) (ATG|GAT) (CAT|GGA) (CCA|GGG) (GCC|TGG) (GGA|GTT) (GGG|TGT) (TAA|GCC) (TGC|ATG) (TGG|ATG)')

   s = pairedComposition(ptn, 3, 2) |> toPairsStr
   s |> testVs('(AAT|CAT) (ATG|ATG) (ATG|ATG) (CAT|GAT) (CCA|GGA) (GCC|GGG) (GGG|GTT) (TAA|CCA) (TGC|TGG) (TGG|TGT)')

# 1.3.13 - Reconstruct genome from Read-Pairs
# if run(6):
   # ps = 'AG|AG AG|TG CA|CT CT|CA CT|CT GC|GC GC|GC GC|GC TG|TG'
   # s = pairsStrToStrPairs(ps, ' ') |> genomeFromPairs(2, 1)
   # s |> testVs(s'AGCAGCTGCTGCA')

   # ps = 'GAGA|TTGA TCGT|GATG CGTG|ATGT TGGT|TGAG GTGA|TGTT GTGG|GTGA TGAG|GTTG GGTC|GAGA GTCG|AGAT'
   # s = pairsStrToStrPairs(ps, ' ') |> genomeFromPairs(4, 2)
   # s |> testVs(s'GTGGTCGTGAGATGTTGA')

   # ps = 'TCA|GCA TTC|TGC AAT|CAT ATT|ATG'
   # s = pairsStrToStrPairs(ps, ' ') |> genomeFromPairs(3, 1)
   # s |> testVs(s'AATTCATGCA')

   # ps = 'GG|GA GT|AT TG|TA GA|AC AT|CT'
   # s = pairsStrToStrPairs(ps, ' ') |> genomeFromPairs(2, 1)
   # s |> testVs(s'GGTGATACT')

   # ps = 'GTTT|ATTT TTTA|TTTG TTAC|TTGT TACG|TGTA ACGT|GTAT CGTT|TATT'
   # s = pairsStrToStrPairs(ps, ' ') |> genomeFromPairs(4, 2)
   # s |> testVs(s'TTTACGTTTGTATTT')
   #     # result: CGTTTACGTTTGTAT

   # ps = 'GGG|GGG AGG|GGG GGG|GGT GGG|GGG GGG|GGG'
   # s = pairsStrToStrPairs(ps, ' ') |> genomeFromPairs(3, 2)
   # s |> testVs(s'AGGGGGGGGGGT')

# if run(7):
#    l = readlines('dataset_204_16.txt')
#    i = parseInts(l[0])
#    s = pairStrsToStrPairs(l[1:], '\n') |> genomeFromPairs(i[0], i[1])
#    s |> echo

# if run(8):
#    s = s'TAATGCCATGGGATGTT'
#    contigs(s, 3)
   # TAAT, TGTT, TGCCAT, ATG, ATG, ATG, TGG, GGG, GGAT.

if run(9):
   ps = 'GACC|GCGC ACCG|CGCC CCGA|GCCG CGAG|CCGG GAGC|CGGA'
   s = pairsStrToStrPairs(ps, ' ') |> genomeFromOrderedPairs(4, 2)
   s |> testVs(s'GACCGAGCGCCGGA')
   l = readlines('dataset_6206_4.txt')
   i = parseInts(l[0])
   s = pairStrsToStrPairs(l[1:], '\n') |> genomeFromOrderedPairs(i[0], i[1])
   s |> echo