from extensions import *
from helpers import *
from adjGraph import *
from graph import *
from seqlib import permsOfLen

# 1.2.2
if run(1):
   s = '''0 -> 3
   1 -> 0
   2 -> 1,6
   3 -> 2
   4 -> 2
   5 -> 4
   6 -> 5,8
   7 -> 9
   8 -> 7
   9 -> 6'''
   print eulerianPath(parseGraphStr(s), 'cycle') |> arrowPathStr

   s = '''1 -> 2
   2 -> 1,2
   0 -> 1'''
   print eulerianPath(parseGraphStr(s), 'cycle') |> arrowPathStr

   s = '''1 -> 10
   10 -> 2,3,4
   2 -> 1
   3 -> 10
   4 -> 5
   5 -> 10'''
   print eulerianPath(parseGraphStr(s), 'cycle') |> arrowPathStr

   s = '''0 -> 1,2,3,4
   1 -> 0,2,3,4
   2 -> 0,1,3,4
   3 -> 0,1,2,4
   4 -> 0,1,2,3'''
   print eulerianPath(parseGraphStr(s), 'cycle') |> arrowPathStr

   s = '''0 -> 3,1
   1 -> 2
   2 -> 0
   3 -> 0'''
   eulerianPath(parseGraphStr(s), 'cycle') |> arrowPathStr |> testVs('0->3->0->1->2->0')
if run(2):
   ag = readGraphStr('dataset_203_2.txt')
   print eulerianPath(ag, 'cycle') |> arrowPathStr

# 1.2.6
if run(3):
   s = '''0 -> 2
   1 -> 3
   2 -> 1
   3 -> 0,4
   6 -> 3,7
   7 -> 8
   8 -> 9
   9 -> 6'''
   eulerianPath(parseGraphStr(s), 'path') |> arrowPathStr |> testVs('6->7->8->9->6->3->0->2->1->3->4')
   ag = readGraphStr('dataset_203_6.txt')
   print eulerianPath(ag, 'path') |> arrowPathStr

# 1.2.7
if run(4):
   ss =  parseSeqsStr('CTTA ACCA TACC GGCT GCTT TTAC')
   reconstructGenome(ss, 'kmers') |> testVs(s'GGCTTACCA') # 'overlap' works too

   ss = parseSeqsStr('AAC AAC ACG ACT CGA GAA')
   reconstructGenome(ss, 'kmers') |> testVs(s'AACGAACT') # 'overlap' works too

   ss = parseSeqsStr('CTAC CTCC TCCT ACTC CCTC CCTA TACT')
   reconstructGenome(ss, 'kmers') |> testIn([s'CCTACTCCTC', s'CCTCCTACTC'])
                        # with 'overlap' -> TCCTACTCCTCC

   ss = parseSeqsStr('CCC CCC CCC TCC CCC CCG CCC CCC CCC')
   reconstructGenome(ss, 'kmers') |> testVs(s'TCCCCCCCCCG')

   ss = parseSeqsStr('AG AT AA GA GG GT TA TG TT AT')
   reconstructGenome(ss, 'kmers') |> testVs(s'AAGTTGGATAT')
   # 'overlap' -> 28-mer genome.   'kmer' -> AGATAATGGTT (wrong too)

if run(5):
   l = readlines('dataset_203_7.txt')
   print reconstructGenome(parseSeqs(l[1:]), 'kmers')

# 1.2.8 - only 1 k-universal circular path and its reverse, so 2
if run(6):
   kmers = permsOfLen(3, '01')
   r = reconstructGenome(kmers, 'kmers', 'universal')
   print r # 00101110 

   kmers = permsOfLen(4, '01')
   r = reconstructGenome(kmers, 'kmers', 'universal')
   print r # 0010011010111100

if run(7):
   kmers = permsOfLen(9, '01')
   r = reconstructGenome(kmers, 'kmers', 'universal')
   reconstructGenome(kmers, 'kmers', 'universal') |> testVs(s

if run(8):
   ptn = s'TAATGCCATGGGATGTT'
   strs = pairedComposition(ptn, 3, 1) |> pairsStrs
   strs.sort()
   strs |> spaceSep |> testVs('(AAT|CCA) (ATG|CAT) (ATG|GAT) (CAT|GGA) (CCA|GGG) (GCC|TGG) (GGA|GTT) (GGG|TGT) (TAA|GCC) (TGC|ATG) (TGG|ATG)')

   strs = pairedComposition(ptn, 3, 2) |> pairsStrs
   strs.sort()
   strs |> spaceSep |> testVs('(AAT|CAT) (ATG|ATG) (ATG|ATG) (CAT|GAT) (CCA|GGA) (GCC|GGG) (GGG|GTT) (TAA|CCA) (TGC|TGG) (TGG|TGT)')
