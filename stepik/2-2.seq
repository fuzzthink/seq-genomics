from extensions import *
from helpers import *
from adjGraph import *
from graph import *

# 1.2.2
if run(1):
   s = '''0 -> 3
   1 -> 0
   2 -> 1,6
   3 -> 2
   4 -> 2
   5 -> 4
   6 -> 5,8
   7 -> 9
   8 -> 7
   9 -> 6'''
   print eulerianPath(parseGraphStr(s), True) |> arrowPathStr

   s = '''1 -> 2
   2 -> 1,2
   0 -> 1'''
   print eulerianPath(parseGraphStr(s), True) |> arrowPathStr

   s = '''1 -> 10
   10 -> 2,3,4
   2 -> 1
   3 -> 10
   4 -> 5
   5 -> 10'''
   print eulerianPath(parseGraphStr(s), True) |> arrowPathStr

   s = '''0 -> 1,2,3,4
   1 -> 0,2,3,4
   2 -> 0,1,3,4
   3 -> 0,1,2,4
   4 -> 0,1,2,3'''
   print eulerianPath(parseGraphStr(s), True) |> arrowPathStr

   s = '''0 -> 3,1
   1 -> 2
   2 -> 0
   3 -> 0'''
   testVs(eulerianPath(parseGraphStr(s), True) |> arrowPathStr, ['0->3->0->1->2->0'])
if run(2):
   ag = readGraphStr('dataset_203_2.txt')
   print eulerianPath(ag, True) |> arrowPathStr

# 1.2.6
if run(3):
   s = '''0 -> 2
   1 -> 3
   2 -> 1
   3 -> 0,4
   6 -> 3,7
   7 -> 8
   8 -> 9
   9 -> 6'''
   print eulerianPath(parseGraphStr(s), False) |> arrowPathStr
   ag = readGraphStr('dataset_203_6.txt')
   print eulerianPath(ag, False) |> arrowPathStr

# 1.2.7
if run(4):
   s =  parseSeqsStr('CTTA ACCA TACC GGCT GCTT TTAC')
   testVs(reconstructGenome(s, 'kmers'), [s'GGCTTACCA']) # 'overlap' works too

   s = parseSeqsStr('AAC AAC ACG ACT CGA GAA')
   testVs(reconstructGenome(s, 'kmers'), [s'AACGAACT']) # 'overlap' works too

   s = parseSeqsStr('CTAC CTCC TCCT ACTC CCTC CCTA TACT')
   testVs(reconstructGenome(s, 'kmers'), [s'CCTACTCCTC', s'CCTCCTACTC'])
                           # 'overlap' -> TCCTACTCCTCC

   s = parseSeqsStr('CCC CCC CCC TCC CCC CCG CCC CCC CCC')
   testVs(reconstructGenome(s, 'kmers'), [s'TCCCCCCCCCG'])

   s = parseSeqsStr('AG AT AA GA GG GT TA TG TT AT')
   testVs(reconstructGenome(s, 'kmers'), [s'AAGTTGGATAT'])
   # 'overlap': AATGGAAGGTGATATTGTAGAGTTAA. AGATAATGGTT <- kmers (wrong too)

if run(5):
   l = readlines('dataset_203_7.txt')
   print reconstructGenome(parseSeqs(l[1:]), 'kmers')

# 1.2.8
