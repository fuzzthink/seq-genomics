from extensions import *
from helpers import adjGraphStr

def concatAdjSeqs(seqs:Seqs) -> seq:
   """ Concat adjacent seqs. Eg. abc, bcd -> abcd
   """
   if len(seqs) == 1:
      return seqs[0]
   if len(seqs) < 1:
      print 'WARN: Returning empty sequence due to seqs of length 0'
      return s''
   res = seqs[0]
   n = len(res)-1
   for i, dna in enumerate(seqs[1:]): 
      if res[i+1:] == dna[:-1]:
         res += dna[-1]
      else:
         raise ValueError('concatAdjSeqs() not possible due to seqs not continuous')
   return res

class AdjGraph:
   ag: Adjacency
   def __init__(self:AdjGraph, dna:Seqs, method:str, k:int):
      """ Returns de Bruijn graph via:
      """
      match method:
         case 'seq':
            self.ag = self.fromSeq(dna[0], k)
         case 'overlap': # more incorrect results than 'kmers'
            self.ag = self.viaOverlap(dna)
         case _:
            self.ag = self.fromKmers(dna)

   def viaOverlap(self:AdjGraph, dna:Seqs) -> Adjacency:
      """ Eg: ATGCG GCATG CATGC AGGCA GGCAT GGCAC =>
      IndexError: list index out of range
      GCATG -> CATGC
      CATGC -> ATGCG
      GGCAT -> GCATG
      AGGCA -> GGCAT,GGCAC
      """
      if len(dna) < 2:
         raise ValueError('Can not build adjacencyGraph from seqs of length 0 - 1')
      seqs = list(set(dna))
      res = Adjacency()
      for i, x in enumerate(seqs):
         for y in seqs[0:i] + seqs[i+1:]:
            if x[1:] == y[:-1]:
               if x not in res:
                  res[x] = Seqs()
               res[x].append(y)
      return res

   def fromKmers(self:AdjGraph, kmers:Seqs) -> Adjacency:
      """ Returns Adjacency Graph where each node value is of length kmer-length - 1 
      Eg. GAGG CAGG GGGG GGGA CAGG AGGG GGAG =>
      AGG -> GGG
      CAG -> AGG,AGG
      GAG -> AGG
      GGA -> GAG
      GGG -> GGA,GGG
      Can't handle 2-mers, eg. AG AT AA GA GG GT TA TG TT AT -> 
      AGATAATGGTT (overlap worst, -> AATGGAAGGTGATATTGTAGAGTTAA)
      AAGTTGGATAT - expected
      """
      if len(kmers) == 0:
         raise ValueError('Can not build adjacencyGraph from empty seqs')

      # Set k to be length of k-mer to look at, not lenght input kmers 
      k = len(kmers[0]) - 1
      if k < 1:
         raise ValueError('Can not build adjacencyGraph via "kmers" method with k=0')
      res = Adjacency()
      for kmer in kmers:
         x, y = list(kmer.split(k, 1))
         if x in res:
            res[x].append(y)
         else:
            res[x] = [y]
      return res

   def fromSeq(self:AdjGraph, dna:seq, k=4) -> Adjacency:
      """ Eg: CTTCTTC, 4 =>
      CTT -> TTC,TTC
      TTC -> TCT
      TCT -> CTT
      """
      if k < 2:
         raise ValueError('Can not build adjacencyGraph from k of 0 - 1')
      seqs = list(dna.split(k-1, 1)) # result are edge labels, so k-1
      res = Adjacency()
      for i, x in enumerate(seqs[:-1]):
         if x not in res:
            res[x] = Seqs()
         res[x].append(seqs[i+1])
      return res

   def __str__(self:AdjGraph) -> str:
      return adjGraphStr(self.ag)
