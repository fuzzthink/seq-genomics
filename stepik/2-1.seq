from extensions import *
from helpers import *
from graphlib import mergeOrderedSeqs
from seq2graph import Seq2Graph

# Lesson 2 - Week 1

# 1.2.3 Get all k-mers in seq (including repeats)
if run(1):
   list(s'CAATCCAAC'.split(5, 1)) |> nlSep |> testVs('''CAATC
AATCC
ATCCA
TCCAA
CCAAC''')


if run(2):
   l = readlines('dataset_197_3.txt')
   S = list(seq(l[1]).split(int(l[0]), 1))
   # S |> nlSep |> echo
   S[0] |> testVs(s'AGAGAACATGCGTAACTTCTCGGAGTTTATGCGTATTGCGTGGGGTACGTCTACTACTTTCACGCAGTATTGCAGGTCAAGGATCGCTAACGCGGCCATA')
   S[-1] |> testVs(s'ACAACAACGACTTATCTACTCGTTACCACTAACGTCCTCCATCGAACGACACCGCGTCTCTCTCATCACATAGCCGAGACGATGTTATCACACTCAAGCC')


# 1.3.3 Genome Path Problem
if run(3):
   s = parseSeqsStr('ACCGA CCGAA CGAAG GAAGC AAGCT')
   mergeOrderedSeqs(s) |> testVs(s'ACCGAAGCT')
if run(4):
   readseqs('dataset_198_3.txt') |> mergeOrderedSeqs |> testVs(s'AACTGCGGGTTTATGTGTGTGCGGGGCGAGTCATGTGAATCCGGACCTAACCGTTCCTGCCAGATATGATCTTAGCCAAGAAAAGTAATTGGGGCCTGGGCGGGAGTAAGTCTTACATACACGTCCACGGTCCATGCTGCCGCCGTCGTAATTTTTAGGTCGCCTATTATATGATGAGAATCACCTCACGTAATAAGGTTGTTATCGTATACTCAAGGGAAACTGACCGTGGGACCAACGTGTCTGAGCCGCATAAATGTATCACAGCCAGCGGGGTATTTGCCTACTCGCCGCTTCGCTAGTGCGCTACTGGTGTCACTCATTAAAGCCACCGGATGGGGCGCTTGAGTGGGTCCGTTCGCCAAAGTAACGTTGCCTAACTCCCACTGAATAGGAGTAGAACTGCACAGTAATGAGATGCTTCGGGCCGATCTCAATCATGACCCTCTAATATAGGGTTGGAATAATTAACCCAGAACCACTTGAGCGAACGGCTATTTCCGCAGGTAGGTCATATTCACGACAGAATAAGTGGACTTTCATGTGAGCGTGGAAATGGCTATCTTCGTGGTCAAGTGGCCTCCTGCGGAGGAGCATAGCCCCCGCTTACCCAAAAATTTCAGCTACTGTCCGACAGGCCCCTTCATCAGGCCTACCTGTTGATCTTTACAAGACTTCATCTCTGCTTAGATGCTTTCACGCCTCTGCAGAGATGTAAAGCGCCAAGTTGCACTCGTTTACAGCGACTTCATAAGTCCTGTATGCCGTGCGGAGCCCACGTTTATCTACTGGAACAACCTCTCGACGGCAATTCAATGAAATAAACAACGTAGAGCGATACGTCGAGGGCCATATGTCAACCTAACACAACATTATCCAACAAGATATCCTTATGTCGCAACGCAAAAGGGGGGAGTCCTTCGAAGTCTTTAATGCCTCGTCATTGTGGCACTTCACCAGCCTTCAGGATGGCTTTCGAGCTATTTCGTTGACGGGCACGAAGTAGCGGTGCCGTCAGAAAACACTCCGTTAGTACCGAAATAGTGGCACACAGGCCAGCAGGGCGTTTTCATATTTCACTTCAACCAGAGACACTTAGCCGGGCGCTAGTCGCGGTTGACAAACTGTCCCTCCTAGAAGTTTGCCCCACAAAGGGAGCCACGATCGTTCAGGTGAAATCGAAATAACGAAGCTTGATTTCATCGGCCGAGAAGCTGATGCGCACGTGGAGCGGCACGAAGACAATTAAAACAGCCACGGTGCTTGCTCTCGCTGAAAGAATTGTGGTCAGTCTTGCGCTCACTTCGTGTGAACGAATCTGATCCATGAACGTGTCACTGTTCGGTCCTGAGACACACATCCTCGCCGATCTGGAATTATATCACAGGTAGTGAAGGATCCAGTGTGCCTATCAATATTTTCTGGTTACATGCCACTTTATACAGCGGTTCGTACCTTAGGGAATTAGAGAAGGGGTCTTTGTGACTAAGCTGTTTAACGGAGAGTGAGTTTTTTAGTCTCTTTAGATATGAGCGTGGGGACGCAAGCCATAAGTAATTCCCCTCTACAGCGAGGTCAATTTAGGCGGAATATATGGCAGCGGTGCAGAGATAGTGAATGTCACAGATGTGTTATCAGGGATAAGATAGGCAGTCCTTTCACGATCCGCTCGTCCTGAGCTTTGGCCCTGTGGCCGTACATGCGGTCTAGGCCAAGTCTACTCCGGCAAGATACAACATGGGTCAATCGTGTTCACAGCCCGGGTCACATATTCGGGCGACTGGCGTGATACTCGGACCAATTTATAAATGAAGAACAAGACAAATTTTAAGGTACCGCGTGAATTACCATCAGCGAGAATTTCCTAGTGGGCCCCGCGGTTAACGGCCCGATAAATTGGGACAGCGGAGACCGTAGTTCTATACTGCTGCTACGGCCCTAAACACATCCCGCCGAACTGTGGCCACTTCAAATCGGCCATGACGTCCCCGGGTGCCTCTGATCCCGCGTAAGCCAGGGGTGCAGTCACAAATGTAGAATCGATTTCGGGCGGGCCCCACCGACACCTCCGGCCCAAAATTCCCGCGGGACGCTGGTGTCGACACTCCGTTCGCCGGCCTTTACCAGACGAGACCCCCTTGTGAGTTTGGAAACTCAGTTAATTAGTTCTCCTGACTAGAATGTCACATCGTAGCTTATTCACAGTCGCCGGGCGGGTACCAAGAGTCAGCTCTGCTGTTGTACGTATGAACACTGATCGCGACTTCCAGATGCATACAAGAGGGCCCTTCACCTGGAGATGACCCGAGAATGCTCTTAGTACCTCTTTAAAGAGCTTACGGAAATCACAAGATAAATGGGCTCCTCTAGGTCAGGGTGGGTCTCGTTTTAGACACCGCCGGTTTACAGCACATGCTAGAGACTTCCAGTCGACCGGCTTTAGCCCCTTTGAGTTGTCTAGATTGTGAATAACATTGATCACCCGTCGTTCACGACCTTAGTATTGCTGTGGTTCGCGATGCGAACATACGGTGCTTCTTAGGAAACTTCGCTGAGCCCATCCGGCAGTTGACAGTATAAGGGGCGAATTTATCTAAACTATTGAACGATGTTCTCGCTATTGATGTTTGTGTGTAACATCCTACTCGGGATATTACGTCATTTATTGTTCAGCTTCTGAAGACAAACTCTGCAGAGTAAAATGAAGATCCCGGCATCGGTCCGCCGTTATATTCACGACCCTAGAACTTGCCATATGGACGAAACAGATCCACAGAGCCCATTATGTGATATTATTTGTGCATATCGAAGGATTGCGAACTTAATCATAAGATCCAGTAATGGGAAGTTGTATGAACCATTCTTACCGGCGCCGCTCCGAGCTTAATAGCATGACAGCGGCCTACCTACTCGACAAAACTATCATGATGGTAGCTTTCGAAGTCCCGCCTGGCGGGCACTCTAATTAACGCCACTAGTTAATACGGGGGTGCGTCGCACTAAGACATGGCTATCGTTGCTCTGCACGACCTCAAGCAGTCTGGAGCACATCTAAGCGCAAGCTCATTGTGTTGGAGATAATAGGTTGCCTGAATACTACATGTGGCAGCCGCGCACGAGGAGATCATACTCTTACAGGTCGGGATCCAGACTGGTAGTTCCGCTCCGATAAATGATATGCTAGTCAGTAAGCGTGTAGGTAACAGGGAGTCCCTGCGCTGGCCGACGCTCAAATAAGGCAGAACTGCTACGTAGCTTTCCTTCCCGCATATCCCACAGAGTGTCACATGGTTTTTTAAGGTGCTATATGGAGGTTCCAAACTATTCAACAAGGAAGCCCAAGTCCTCAGGGAGTTCTATAGCGATTTACATGCCGACCCGCCCGTAGCAGGACATCCGAATTGATCGCGAGCCCACGCTCGAAGAATTCCACCAATGTAGAAGTAGCCAGAGATACAGGTGCATCTTGCTTGCGAAAAATGAGGCATTTGTCCCAGCGCTCCATGGGTGTTACTTCGACGACAAAGCGTCACCTCTTGTAAGCGCCTACCTCGCTGCCCGCACCGACGATAGTTACCAACTTAGCCGTCGAGACTCGGAGCGGAAGTTTATCCGGCCTGCAACCAAGCCAGAACCAATCGATCAGCCTTCATGATAGACGTGGTCTTAGCAAGATTGCTGCATAAGGTTTAATAAAAGCTTCGTTGCCAAAAGCGATCTACTTGGAGCGTGGATTAAACCCGTCACACACGCGCCAGCATACTAGCAACCCTGATCCGTCTTTACGTGGCATTGGCTGCTTACAAGGAGCCGTTGCATGCGATTCTAGCGATAACAACGACCGACACCGTCGACAATGTCAAATATCACATAGTGGTACGTCGTTGCACCAAGACTTTTAGCGCTCAGCCCCGTTCAATCGATCGCCAGTCAAACCTAGCCCGCTCGCGTGTCCGTACCCAAAATCTTTGTACGTTACCACTAGGTAACAGTTGCTTCGCGGGAGTCTTAGCGTTGCGCAGGGATGAATCTTTGTGCCCTTTACATTCAGGTACACATATTGAGTTCTGATCGGTCCGGGCCGACACTTCTAGGGTGGCGACCGCACGAGAAGAGTATCCAGTCGCTGTGGCATTTTTCCGCGCACTACATGCGTCCCTGGAGCCGTGGCCTAGTGATAGTCAATTGCTCACGATCATTGTACGATGCAGCTTTTGCCGCCATTGACAAAGGTGCACCTAATCTTTAGGAGAGTATTATCTATCCTCCAGTGAGCTCAGGGGAGATAAAACAGGGCCCAACAGGTCTATTGTGTAGCAGACGCACTTCTACGCACAAGTCAAGATCTGTCATTCCGCCCCACTAAGTGGGTAACTATGCCTTAGGCAAGGCGTTCGGAAGGGGCCTTTTAGATCAAGTCGTGGGTTCATCTGGCGGGCGAAGAATGGTTTTAAAAGTCAATATTCAACTTCCAGAAGCCTTACTAAGTCGACGGCTATAATTACTCTGTCTTGTTCGATAGGGGATATGTCCCTCAAAATTAGATTGGACGTCGACTACACTGTCAAAATATAGGAAACGTTAACTAGCGTCGGACATGCTCTGCATTTTTAGTGGGATCCTTTCCATACCCCCGCTCCATCAAGCTTTCGTACTGAGAGAGTATCGCATAATTAACAATAGGTCTCCAGTGAAATAAACTTACGAATTAACATATCACAGCAGATGCCCGTCAAGCAGTAAATCCTCTGCTGGTACAGACGCGCTACAGAAAAGTGTTTCACGACTTTCCTTCTCCTGATTGCCATGCGGCTTTGTGATTCGCACCGCGAACAAGCAAAGTCTGATCGAACTACCACTCTTTTCTTCGCCCTCCTAAGTTGAGATTCGATGCATCCGGAACACTATAGTACTAGAGCGTTTGCCGTCGGTGTAATTGCGCGATGACCGGCCAGTGTCATCGTTGAGGCTATCGTGCATTGGTCAGAAGTCCGGTGGCA')

# 1.3.10
if run(5):
   s = parseSeqsStr('ATGCG GCATG CATGC AGGCA GGCAT GGCAC')
   r = Seq2Graph(s, 'overlap', 0)
   str(r) |> testVs('''GCATG -> CATGC
CATGC -> ATGCG
GGCAT -> GCATG
AGGCA -> GGCAC,GGCAT''')

   s = parseSeqsStr('CT TT TT')
   r = Seq2Graph(s, 'overlap', 0)
   str(r) |> testVs('CT -> TT')

if run(6):
   s = readseqs('dataset_198_10.txt')
   r = Seq2Graph(s, 'overlap', 0)
   l = str(r).split('\n')
   l[0] |> testVs('AGTCTGAACTTAGTGCTGCCTCAGA -> GTCTGAACTTAGTGCTGCCTCAGAT')
   l[-1] |> testVs('TGGCAGCAGGCATCTTGGCCAGTAT -> GGCAGCAGGCATCTTGGCCAGTATC')


# 1.4.6 
if run(7):
   r = Seq2Graph([s'AAGATTCTCTAAGA'], 'seq', 4)
   str(r) |> testVs('''CTA -> TAA
ATT -> TTC
CTC -> TCT
TTC -> TCT
TAA -> AAG
TCT -> CTC,CTA
AAG -> AGA,AGA
GAT -> ATT
AGA -> GAT''')

   r = Seq2Graph([s'GCTTCTTC'], 'seq', 4)
   str(r) |> testVs('''GCT -> CTT
TTC -> TCT
CTT -> TTC,TTC
TCT -> CTT''')

if run(8):
   l = readlines('dataset_199_6.txt')
   r = Seq2Graph([seq(l[1])], 'seq', int(l[0]))
   l = str(r).split('\n')
   l[0] |> testVs('TGACATAACGT -> GACATAACGTT')
   l[-1] |> testVs('GCACGAGCCAG -> CACGAGCCAGA')


# 1.5.8 
if run(9):
   r = Seq2Graph(parseSeqsStr('GAGG CAGG GGGG GGGA CAGG AGGG GGAG'), 'kmers', 0)
   str(r) |> testVs('''CAG -> AGG,AGG
AGG -> GGG
GGA -> GAG
GAG -> AGG
GGG -> GGG,GGA''')

if run(10):
   dna = readseqs('dataset_200_8.txt')
   r = Seq2Graph(dna, 'kmers', 0)
   l = str(r).split('\n')
   l[0] |> testVs('AACTATTGGATATCGAAAC -> ACTATTGGATATCGAAACA')
   l[-1] |> testVs('TTTAAACGGCCCGGATGCA -> TTAAACGGCCCGGATGCAG')
